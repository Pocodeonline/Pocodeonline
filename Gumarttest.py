import os
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from colorama import Fore, Style, init
from selenium.common.exceptions import NoSuchElementException

PINK = '\033[38;5;13m'
RED = '\033[38;5;9m'
YELLOW = '\033[38;5;11m'
GREEN = '\033[38;5;10m'
LIGHT_PINK = '\033[38;5;207m'
BLINK = '\033[5m'
RESET = '\033[0m'
FLAME_ORANGE = '\033[38;5;208m'
SILVER = '\033[38;5;231m'
# Initialize colorama
init(autoreset=True)

def count_non_empty_lines(file_path):
    """ƒê·∫øm s·ªë d√≤ng kh√¥ng tr·ªëng trong file."""
    if not os.path.exists(file_path):
        return 0
    with open(file_path, 'r') as file:
        lines = file.readlines()
        non_empty_lines = [line.strip() for line in lines if line.strip()]
        return len(non_empty_lines)

def read_accounts(file_path):
    """ƒê·ªçc c√°c t√†i kho·∫£n t·ª´ file v√† lo·∫°i b·ªè c√°c d√≤ng tr·ªëng."""
    with open(file_path, 'r') as file:
        links = file.readlines()
    return [link.strip() for link in links if link.strip()]

def print_custom_logo(blink=False):
    logo = [
        " üõíüõíüõí    üõí       üõí  üõí      üõí      üõíüõí      üõíüõíüõí  üõíüõíüõíüõíüõí ",
        "üõí    üõí   üõí       üõí  üõíüõí  üõíüõí     üõí  üõí     üõí    üõí    üõí ",
        "üõí         üõí       üõí  üõí üõíüõí üõí    üõíüõíüõíüõí    üõí    üõí    üõí",
        "üõí   üõíüõí  üõí       üõí  üõí  üõí  üõí   üõí      üõí   üõíüõíüõíüõí    üõí ",
        "üõí    üõí   üõí       üõí  üõí      üõí  üõí        üõí  üõí    üõí    üõí",
        " üõíüõíüõí     üõíüõíüõíüõíüõí  üõí      üõí üõí          üõí üõí     üõí   üõí",
        "                                                                         ",
        "ch·ªù m·ªôt l√°t..."
    ]
    os.system('cls' if os.name == 'nt' else 'clear')
    for _ in range(5):
        if blink:
            print(f"{BLINK}{GREEN}" + "\n".join(logo) + RESET)
        else:
            print(f"{BLINK}{GREEN}" + "\n".join(logo))
        time.sleep(0.3)
        os.system('cls' if os.name == 'nt' else 'clear')
        time.sleep(0.3)

def wait_for_element(driver, selector, timeout=30):
    """Ch·ªù cho ph·∫ßn t·ª≠ c√≥ m·∫∑t tr√™n trang."""
    return WebDriverWait(driver, timeout).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
    )

def click_element_js(driver, selector):
    """Nh·∫•p v√†o ph·∫ßn t·ª≠ b·∫±ng JavaScript."""
    js_script = f"document.querySelector('{selector}').click();"
    driver.execute_script(js_script)

def click_element_xpath(driver, xpath):
    """Nh·∫•p v√†o ph·∫ßn t·ª≠ b·∫±ng XPath."""
    element = WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.XPATH, xpath))
    )
    element.click()

def click_element_if_exists(driver, xpath):
    """Nh·∫•p v√†o ph·∫ßn t·ª≠ n·∫øu n√≥ t·ªìn t·∫°i."""
    try:
        element = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, xpath))
        )
        element.click()
        return True
    except NoSuchElementException:
        return False

def run_chrome_instances(links, num_accounts, rest_time):
    """Ch·∫°y c√°c phi√™n b·∫£n Chrome v·ªõi c√°c li√™n k·∫øt t√†i kho·∫£n v√† ngh·ªâ ng∆°i sau khi ho√†n t·∫•t."""
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-popup-blocking")
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--remote-debugging-port=0")

    while True:
        # Ch·∫°y theo t·ª´ng kh·ªëi t√†i kho·∫£n
        for start in range(0, len(links), num_accounts):
            end = min(start + num_accounts, len(links))
            current_links = links[start:end]
            
            for i, account_url in enumerate(current_links):
                print(f"{Fore.GREEN}üêÆ ƒêang ch·∫°y t√†i kho·∫£n {FLAME_ORANGE} {start+i+1}{YELLOW}/{LIGHT_PINK}{len(links)}")
                driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
                driver.get(account_url)
                time.sleep(2)
                try:
                    # Check for page load
                    page_loaded_selector = "#__nuxt > div > div > section > div > div > div.flex.gap-1.mb-4 > p"
                    WebDriverWait(driver, 30).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, page_loaded_selector))
                    )
                    print(f"{Fore.GREEN}ƒê√£ V√†o Giao di·ªán {driver.title} Acc {FLAME_ORANGE} {start+i+1}")
                    time.sleep(4)
                    # Click to start
                    start_button_selector = "#__nuxt > div > div > section > div > button > p"
                    WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, start_button_selector))
                    )
                    click_element_js(driver, start_button_selector)
                    time.sleep(3)
                    # Wait for Capital Starting
                    for attempt in range(5):
                        try:
                            capital_started_selector = "#__nuxt > div > div > section > div.flex.flex-col.h-full.justify-between.gap-4.pt-4 > div:nth-child(3) > div > p.text-\\[1\\.5rem\\].text-\\[\\#FFF\\].font-bold"
                            WebDriverWait(driver, 5).until(
                                EC.presence_of_element_located((By.CSS_SELECTOR, capital_started_selector))
                            )
                            print(f"{Fore.GREEN} Starting Capital th√†nh c√¥ng ‚úÖ")

                            # Click the Capital button
                            capital_button_selector = "#__nuxt > div > div > section > div.flex.flex-col.h-full.justify-between.gap-4.pt-4 > div:nth-child(3) > button > p"
                            click_element_js(driver, capital_button_selector)

                            break
                        except Exception as e:
                            if attempt == 4:
                                driver.refresh()
                                print(f"{Fore.RED}Kh√¥ng t√¨m th·∫•y Capital. T·ª± ƒë·ªông t·∫£i l·∫°i trang.")
                            time.sleep(5)

                    # Continue with the workflow
                    print(f"{Fore.GREEN}B·∫Øt ƒë·∫ßu v√†o ki·∫øm gumart{YELLOW}...")
                    time.sleep(2)

                    points_selector = "#__nuxt > div > div > section > div.w-full.flex.flex-col.gap-4.px-4.py-2.relative.z-\\[3\\] > div.flex.flex-col.gap-2.items-center > div > p"
                    points_element = WebDriverWait(driver, 30).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, points_selector))
                    )
                    points = points_element.text
                    print(f"{Fore.GREEN}S·ªë d∆∞ c·ªßa b·∫°n l√† : {YELLOW}{points}")

                    # Wait 3 seconds
                    time.sleep(3)

                    # Click the button using XPath
                    claim_button_xpath = "/html/body/div[1]/div/div/section/div[5]/div/div/div/div[3]/button/p"
                    click_element_xpath(driver, claim_button_xpath)
                    print(f"{Fore.GREEN}ƒê√£ claim point th√†nh c√¥ng ‚úÖ ")
                    time.sleep(2)
                    # Wait for balance update
                    balance_selector = "#__nuxt > div > div > section > div.w-full.flex.flex-col.gap-4.px-4.py-2.relative.z-\\[3\\] > div.flex.flex-col.gap-2.items-center > div > p"
                    balance_element = WebDriverWait(driver, 30).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, balance_selector))
                    )
                    balance = balance_element.text
                    print(f"{Fore.GREEN}S·ªë d∆∞ c·ªßa b·∫°n khi claim xong l√† : {YELLOW}{balance}")

                    # Click the button using XPath
                    double_button_xpath = '/html/body/div[1]/div/div/section/div[5]/button/div/img'
                    if click_element_if_exists(driver, double_button_xpath):
                        print(f"{Fore.GREEN}Mua x2 th√†nh c√¥ng ‚úÖ")
                        time.sleep(2)
                    else:
                        print(f"{Fore.RED}X2 ch∆∞a h·ªìi xong")

                    # Wait for double remaining time and get the remaining time
                    double_remaining_selector = "#__nuxt > div > div > section > div.relative.z-\\[2\\].px-2.flex.flex-col.gap-2 > button > div > div > p"
                    double_remaining = WebDriverWait(driver, 30).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, double_remaining_selector))
                    ).text
                    print(f"{Fore.GREEN} Th·ªùi gian x2 c√≤n l·∫°i{YELLOW} {double_remaining}...")

                    print(f"{Fore.GREEN}ƒê√£ l√†m xong acc {FLAME_ORANGE}{start+i+1} ‚úÖ")

                except Exception as e:
                    print(f"{Fore.RED}ƒê√£ x·∫£y ra l·ªói: {e}")

                finally:
                    driver.quit()

            # Ngh·ªâ ng∆°i gi·ªØa c√°c kh·ªëi t√†i kho·∫£n
            for remaining in range(rest_time, 0, -1):
                print(f"{Fore.YELLOW}Ngh·ªâ ng∆°i {remaining} gi√¢y tr∆∞·ªõc khi ch·∫°y ti·∫øp...", end='\r')
                time.sleep(1)
            print(f"{Fore.YELLOW}Ngh·ªâ ng∆°i xong!                     ")

if __name__ == "__main__":
    print_custom_logo(blink=True)
    file_path = 'gumart.txt'

    try:
        while True:
            non_empty_lines = count_non_empty_lines(file_path)
            if non_empty_lines == 0:
                print(f"{Fore.RED}File kh√¥ng ch·ª©a t√†i kho·∫£n n√†o.")
                break

            links = read_accounts(file_path)
            print(f"{SILVER}GUMART üõí {LIGHT_PINK}code by üêÆ{RESET}")
            print(f"{LIGHT_PINK}tele{YELLOW}: {PINK}tphuc_0 {RESET}")
            print(f"{GREEN}Hi·ªán t·∫°i b·∫°n c√≥ {YELLOW} {non_empty_lines} {GREEN} t√†i kho·∫£n ")
            user_input = input(f"{GREEN}Nh·∫≠p s·ªë l∆∞·ª£ng t√†i kho·∫£n mu·ªën üêÆ ch·∫°y {YELLOW}({GREEN}ho·∫∑c {YELLOW}'{LIGHT_PINK}all{YELLOW}' {GREEN}ƒë·ªÉ ch·∫°y t·∫•t c·∫£{YELLOW}, {RED}0 {GREEN}ƒë·ªÉ tho√°t{YELLOW}): ").strip()

            if user_input.lower() == 'all':
                num_accounts = len(links)
            elif user_input.isdigit():
                num_accounts = int(user_input)
                if num_accounts <= 0:
                    break
                if num_accounts > len(links):
                    num_accounts = len(links)
            else:
                print(f"{Fore.RED}Nh·∫≠p kh√¥ng h·ª£p l·ªá!")
                continue

            rest_time = int(input(f"{GREEN}Nh·∫≠p th·ªùi gian ngh·ªâ ng∆°i sau khi üêÆ ch·∫°y xong t·∫•t c·∫£ c√°c t√†i kho·∫£n {YELLOW}({GREEN}Khuy√™n {YELLOW}9000 {GREEN}nha{YELLOW}): ").strip())
            run_chrome_instances(links, num_accounts, rest_time)

    except KeyboardInterrupt:
        print(f"{Fore.RED}\nCh∆∞∆°ng tr√¨nh ch·∫°y ƒë√£ k·∫øt th√∫c...!")
