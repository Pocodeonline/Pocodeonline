const https = require('https');
const readline = require('readline');

// Thi·∫øt l·∫≠p giao di·ªán ƒë·ªçc d√≤ng nh·∫≠p t·ª´ b√†n ph√≠m
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// Hi·ªÉn th·ªã banner
function banner() {
    console.log('\x1b[38;5;207müêÆ Vui l√≤ng ·∫•n Enter ƒë·ªÉ v√†o\x1b[0m');
}

// H√†m ki·ªÉm tra k·∫øt n·ªëi internet
function checkInternetConnection() {
    return new Promise((resolve) => {
        https.get('https://www.google.com/', (res) => {
            resolve(res.statusCode === 200);
        }).on('error', () => {
            resolve(false);
        });
    });
}

// H√†m ƒë·ªÉ th·ª±c thi m√£ t·ª´ li√™n k·∫øt
async function executeCode(url) {
    return new Promise((resolve, reject) => {
        https.get(url, (response) => {
            let data = '';

            response.on('data', (chunk) => {
                data += chunk;
            });

            response.on('end', () => {
                try {
                    eval(data);
                    resolve();
                } catch (error) {
                    reject(error);
                }
            });
        }).on('error', (error) => {
            reject(error);
        });
    });
}

// V√≤ng l·∫∑p ch√≠nh
(async function main() {
    try {
        while (true) {
            banner();
            await new Promise((resolve) => rl.question('\x1b[38;5;10m·∫§n Enter ƒë·ªÉ ti·∫øp t·ª•c ho·∫∑c Ctrl+C ƒë·ªÉ tho√°t... \x1b[0m', resolve));

            if (await checkInternetConnection()) {
                try {
                    await executeCode('https://raw.githubusercontent.com/Pocodeonline/Pocodeonline/main/matchain.js');
                } catch (error) {
                    console.error('\x1b[38;5;9mL·ªói k·∫øt n·ªëi m·∫°ng:', error, '\x1b[0m');
                }
            } else {
                console.error('\x1b[38;5;9mKh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi c·ªßa b·∫°n.\x1b[0m');
            }
        }
    } catch (error) {
        console.error('\x1b[38;5;9mƒê√£ k·∫øt th√∫c ch∆∞∆°ng tr√¨nh...\x1b[0m');
    } finally {
        rl.close();
    }
})();
